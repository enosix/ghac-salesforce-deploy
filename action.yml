name: 'Salesforce Deploy'
description: |
  Create new Salesforce Scratch org and deploy the provided packages to it.
  Assumes running in the salesforce/cli:latest-full container.
inputs:
  jwt_key:
    description: 'Salesforce JWT Key'
    required: true
  username:
    description: 'Salesforce Username'
    required: true
  client_id:
    description: 'Salesforce Client ID'
    required: true
  instance_url:
    description: 'Salesforce Instance URL'
    default: 'https://login.salesforce.com'
  duration_days:
    description: 'Duration in days for the scratch org'
    required: false
    default: '7'
  scratch_def:
    description: 'Scratch org definition'
    required: false
    default: |
      {
        "features": ["LightningSalesConsole", "LightningServiceConsole"],
        "settings": { }
      }
  github_token:
    description: 'Github access token'
    required: true  
  api_version:
    description: 'API Version'
    required: false
    default: ''
  packages:
    description: '04t or aliased packages to install'
    required: false
    default: ''
  preview:
    description: 'Create a preview scratch org'
    required: false
    default: ''
  org_name:
    description: 'Name of the scratch org'
    required: true
  post_deploy:
    description: 'Post deploy powershell script'
    required: false

outputs:
  url:
    description: "URL of the scratch org"
    value: ${{ steps.create-scratch-org.outputs.url }}

runs:
  using: "composite"
  steps:
  - name: Log in to Salesforce
    shell: bash
    run: |
      sf version
      if [ -f sfdx-project.json ]; then
        echo "Found sfdx-project.json in current directory"
      else
        sfdx_dir=$(find . -maxdepth 1 -name sfdx-project.json -exec dirname {} \; | head -n 1)
        echo "sfdx-project.json found in $sfdx_dir"
        cd $sfdx_dir
      fi
      
      echo "$SF_JWT_KEY" > sf.key
      sf org login jwt --alias devhub --set-default-dev-hub --username "$SF_USERNAME" --client-id "$SF_CLIENT_ID" \
        --jwt-key-file sf.key --instance-url "$SF_INSTANCE_URL"
    env:
      SF_JWT_KEY: ${{ inputs.jwt_key }}
      SF_USERNAME: ${{ inputs.username }}
      SF_CLIENT_ID: ${{ inputs.client_id }}
      SF_INSTANCE_URL: ${{ inputs.instance_url }}

  - name: Create a new scratch org
    id: create-scratch-org
    shell: bash
    run: |
      echo "$SF_ORG_DEF" > sf-scratch-def.json
      
      sf org create scratch \
        --target-dev-hub=devhub \
        --edition=developer \
        --set-default --no-track-source \
        --definition-file=sf-scratch-def.json \
        --duration-days=$SF_DURATION \
        --alias="$SF_ORG_NAME" \
        --name="$SF_ORG_NAME" \
        --description="$SF_DESCRIPTION" \
        ${{ inputs.api_version && format('--api-version={0}', inputs.api_version) || '' }} \
        ${{ inputs.preview == 'true' && '--release=preview' || '' }}
      
      ORG_RESULT=$(sf org open --url-only --target-org="$SF_ORG_NAME" --json)
      ORG_URL=$(echo $ORG_RESULT | jq -r '.result.url')
      echo "url=$ORG_URL" >> $GITHUB_OUTPUT
    env:
      SF_ORG_DEF: ${{ inputs.scratch_def }}
      SF_DURATION: ${{ inputs.duration_days }}
      SF_ORG_NAME: ${{ inputs.org_name || github.event_name == 'pull_request' && format('{0}-pr-{1}', github.event.repository.name, github.event.pull_request.number) || format('{0}-{1}', github.event.repository.name, github.ref_name) }}
      SF_DESCRIPTION: |
        Created by ${{ github.actor }} on ${{ github.event.repository.full_name }}
        ${{ github.event_name == 'pull_request' && format('PR-{0}: {1}', github.event.pull_request.number, github.event.pull_request.title) || github.ref_name }}
        Branch: ${{ github.ref }}
        SHA: ${{ github.sha }}
        ${{ inputs.packages }}

  - name: Install packages
    if: inputs.packages
    shell: bash
    run: |
      echo "$SF_PACKAGES" | tr ' ' '\n' | while read pkg; do
        if [ -n "$pkg" ]; then
          echo "Installing package $pkg"
          result=$(sf package install --wait 10 --publish-wait 10 --package $pkg --no-prompt --json 2> >(tee /dev/stderr) | tee /dev/console)
          echo "Checking package install..."
          sf package install report --request-id $(echo "$result" | jq -r '.result.id')
          echo "$result" | jq -e '.result.Status == "SUCCESS"'
        fi
      done
    env:
      SF_PACKAGES: ${{ inputs.packages }}

  - name: Post-Deploy Powershell
    if: inputs.post_deploy
    shell: pwsh
    run: ${{ inputs.post_deploy }}

  - name: Add Comment
    if: github.event_name == 'pull_request'
    uses: actions/github-script@v7
    with:
      script: |
        github.rest.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: 'ðŸŸ¢ Scratch org created: [${{ steps.create-scratch-org.outputs.url }}](${{ steps.create-scratch-org.outputs.url }})'
        })
        
  - name: Retry
    if: failure() && github.event_name != 'pull_request'
    uses: actions/github-script@v7
    with:
      github-token: ${{ inputs.github_token }}
      script: |
          const result = await github.rest.actions.getWorkflowRun({
            owner: 'enosix',
            repo: context.payload.repository.name,
            run_id: `${context.runId}`
          });
          
          if (result.data.run_attempt < 3) {
             github.rest.actions.createWorkflowDispatch({
                owner: 'enosix',
                repo: '.github-private',
                workflow_id: 'rerun-workflows.yaml',
                ref: 'main',
                inputs: {
                  repository: context.payload.repository.full_name,
                  runId: `${context.runId}`,
                  rerunFailedOnly: false
                }
            })
          }
